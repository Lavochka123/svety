import logging
import qrcode
import os
from urllib.parse import quote
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CallbackContext
)

# –°—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
DESIGN, INTRO, PROPOSAL, TIMES = range(4)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)


async def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    await update.message.reply_text(
        "–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –∏–¥–µ–∞–ª—å–Ω—ã–º!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–∏–∑–∞–π–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:"
    )
    keyboard = [
        [InlineKeyboardButton("üéÜ –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –Ω–æ—á—å", callback_data="design_elegant")],
        [InlineKeyboardButton("üåπ –†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="design_romantic")],
        [InlineKeyboardButton("üé∂ –ú—É–∑—ã–∫–∞ –∏ –∫–∏–Ω–æ", callback_data="design_music")],
        [InlineKeyboardButton("üí° –ú–∏–Ω–∏–º–∞–ª–∏–∑–º", callback_data="design_minimal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=reply_markup)
    return DESIGN


async def design_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–∑–∞–π–Ω–∞"""
    query = update.callback_query
    await query.answer()
    design = query.data
    context.user_data["design"] = design
    await query.edit_message_text(
        text=f"–¢—ã –≤—ã–±—Ä–∞–ª {design}. –í–≤–µ–¥–∏ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:"
    )
    return INTRO


async def get_intro(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    intro_text = update.message.text
    context.user_data["intro"] = intro_text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–∞–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:")
    return PROPOSAL


async def get_proposal(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    proposal_text = update.message.text
    context.user_data["proposal"] = proposal_text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "üïó 19:00 | 21 —è–Ω–≤–∞—Ä—è\n"
        "üåô 20:30 | 22 —è–Ω–≤–∞—Ä—è\n"
        "‚òï 17:00 | 23 —è–Ω–≤–∞—Ä—è)"
    )
    return TIMES


async def get_times(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –∏ QR-–∫–æ–¥–∞"""
    times_text = update.message.text
    context.user_data["times"] = times_text.splitlines()  # –†–∞–∑–±–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    design = context.user_data.get("design", "design_elegant")
    intro = context.user_data.get("intro", "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –Ω–µ—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ...")
    proposal = context.user_data.get("proposal", "–î–∞–≤–∞–π –ø—Ä–æ–≤–µ–¥—ë–º —ç—Ç–æ—Ç –≤–µ—á–µ—Ä –≤–º–µ—Å—Ç–µ. –Ø –∑–Ω–∞—é —É—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ!")
    times = context.user_data.get("times", ["üïó 19:00 | 21 —è–Ω–≤–∞—Ä—è", "üåô 20:30 | 22 —è–Ω–≤–∞—Ä—è", "‚òï 17:00 | 23 —è–Ω–≤–∞—Ä—è"])

    # –ö–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è URL
    encoded_intro = quote(intro)
    encoded_proposal = quote(proposal)

    # –ü–æ–ª—É—á–∞–µ–º chat_id —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    chat_id = update.effective_chat.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –í–ê–® –î–û–ú–ï–ù –ò–õ–ò NGROK)
    public_url = "http://127.0.0.1:5000"  # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ–º–µ–Ω, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å
    invite_url = (f"{public_url}/invite/unique_invite_id?"
                  f"design={design}&intro={encoded_intro}&proposal={encoded_proposal}"
                  f"&chat_id={chat_id}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
    img = qrcode.make(invite_url)
    img_path = "invite_qr.png"
    img.save(img_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ —Å –ø–æ–¥–ø–∏—Å—å—é
    with open(img_path, "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption=f"–û—Ç–ª–∏—á–Ω–æ! –ú–∏–Ω–∏-—Å–∞–π—Ç –≥–æ—Ç–æ–≤.\n\n"
                    f"üìå –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {invite_url}"
        )

    # –£–¥–∞–ª—è–µ–º QR-–∫–æ–¥ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    os.remove(img_path)

    return ConversationHandler.END


def main():
    """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
    application = ApplicationBuilder().token("8046219766:AAGFsWXIFTEPe8aaTBimVyWm2au2f-uIYSs").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DESIGN: [CallbackQueryHandler(design_choice)],
            INTRO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_intro)],
            PROPOSAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_proposal)],
            TIMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_times)]
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == "__main__":
    main()
