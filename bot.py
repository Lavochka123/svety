# bot.py
import logging
import qrcode
from urllib.parse import quote
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CallbackContext
)

# –°—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
DESIGN, INTRO, PROPOSAL, TIMES = range(4)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –∏–¥–µ–∞–ª—å–Ω—ã–º!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–∏–∑–∞–π–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:"
    )
    keyboard = [
        [InlineKeyboardButton("üéÜ –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –Ω–æ—á—å", callback_data="design_elegant")],
        [InlineKeyboardButton("üåπ –†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="design_romantic")],
        [InlineKeyboardButton("üé∂ –ú—É–∑—ã–∫–∞ –∏ –∫–∏–Ω–æ", callback_data="design_music")],
        [InlineKeyboardButton("üí° –ú–∏–Ω–∏–º–∞–ª–∏–∑–º", callback_data="design_minimal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=reply_markup)
    return DESIGN

async def design_choice(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    design = query.data
    context.user_data["design"] = design
    await query.edit_message_text(
        text=f"–¢—ã –≤—ã–±—Ä–∞–ª {design}. –í–≤–µ–¥–∏ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:"
    )
    return INTRO

async def get_intro(update: Update, context: CallbackContext) -> int:
    intro_text = update.message.text
    context.user_data["intro"] = intro_text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–∞–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:")
    return PROPOSAL

async def get_proposal(update: Update, context: CallbackContext) -> int:
    proposal_text = update.message.text
    context.user_data["proposal"] = proposal_text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "üïó 19:00 | 21 —è–Ω–≤–∞—Ä—è\n"
        "üåô 20:30 | 22 —è–Ω–≤–∞—Ä—è\n"
        "‚òï 17:00 | 23 —è–Ω–≤–∞—Ä—è)"
    )
    return TIMES

async def get_times(update: Update, context: CallbackContext) -> int:
    times_text = update.message.text
    context.user_data["times"] = times_text.splitlines()  # —Ä–∞–∑–±–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    design = context.user_data.get("design", "design_elegant")
    intro = context.user_data.get("intro", "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –Ω–µ—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ...")
    proposal = context.user_data.get("proposal", "–î–∞–≤–∞–π –ø—Ä–æ–≤–µ–¥—ë–º —ç—Ç–æ—Ç –≤–µ—á–µ—Ä –≤–º–µ—Å—Ç–µ. –Ø –∑–Ω–∞—é —É—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ!")
    times = context.user_data.get("times", ["üïó 19:00 | 21 —è–Ω–≤–∞—Ä—è", "üåô 20:30 | 22 —è–Ω–≤–∞—Ä—è", "‚òï 17:00 | 23 —è–Ω–≤–∞—Ä—è"])

    # –ö–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è URL
    encoded_intro = quote(intro)
    encoded_proposal = quote(proposal)

    # –ü–æ–ª—É—á–∞–µ–º chat_id —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    chat_id = update.effective_chat.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:5000)
    invite_url = (f"http://127.0.0.1:5000/invite/unique_invite_id?"
                  f"design={design}&intro={encoded_intro}&proposal={encoded_proposal}"
                  f"&chat_id={chat_id}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR‚Äë–∫–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    img = qrcode.make(invite_url)
    img_path = "invite_qr.png"
    img.save(img_path)

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –ú–∏–Ω–∏‚Äë—Å–∞–π—Ç –≥–æ—Ç–æ–≤. –û—Ç–∫—Ä–æ–π —ç—Ç–æ—Ç URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n{invite_url}"
    )
    return ConversationHandler.END

def main():
    application = ApplicationBuilder().token("–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DESIGN: [CallbackQueryHandler(design_choice)],
            INTRO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_intro)],
            PROPOSAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_proposal)],
            TIMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_times)]
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
# bot.py
import logging
import qrcode
from urllib.parse import quote
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CallbackContext
)

# –°—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
DESIGN, INTRO, PROPOSAL, TIMES = range(4)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –∏–¥–µ–∞–ª—å–Ω—ã–º!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–∏–∑–∞–π–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:"
    )
    keyboard = [
        [InlineKeyboardButton("üéÜ –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –Ω–æ—á—å", callback_data="design_elegant")],
        [InlineKeyboardButton("üåπ –†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="design_romantic")],
        [InlineKeyboardButton("üé∂ –ú—É–∑—ã–∫–∞ –∏ –∫–∏–Ω–æ", callback_data="design_music")],
        [InlineKeyboardButton("üí° –ú–∏–Ω–∏–º–∞–ª–∏–∑–º", callback_data="design_minimal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=reply_markup)
    return DESIGN

async def design_choice(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    design = query.data
    context.user_data["design"] = design
    await query.edit_message_text(
        text=f"–¢—ã –≤—ã–±—Ä–∞–ª {design}. –í–≤–µ–¥–∏ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:"
    )
    return INTRO

async def get_intro(update: Update, context: CallbackContext) -> int:
    intro_text = update.message.text
    context.user_data["intro"] = intro_text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–∞–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:")
    return PROPOSAL

async def get_proposal(update: Update, context: CallbackContext) -> int:
    proposal_text = update.message.text
    context.user_data["proposal"] = proposal_text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "üïó 19:00 | 21 —è–Ω–≤–∞—Ä—è\n"
        "üåô 20:30 | 22 —è–Ω–≤–∞—Ä—è\n"
        "‚òï 17:00 | 23 —è–Ω–≤–∞—Ä—è)"
    )
    return TIMES

async def get_times(update: Update, context: CallbackContext) -> int:
    times_text = update.message.text
    context.user_data["times"] = times_text.splitlines()  # —Ä–∞–∑–±–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    design = context.user_data.get("design", "design_elegant")
    intro = context.user_data.get("intro", "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –Ω–µ—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ...")
    proposal = context.user_data.get("proposal", "–î–∞–≤–∞–π –ø—Ä–æ–≤–µ–¥—ë–º —ç—Ç–æ—Ç –≤–µ—á–µ—Ä –≤–º–µ—Å—Ç–µ. –Ø –∑–Ω–∞—é —É—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ!")
    times = context.user_data.get("times", ["üïó 19:00 | 21 —è–Ω–≤–∞—Ä—è", "üåô 20:30 | 22 —è–Ω–≤–∞—Ä—è", "‚òï 17:00 | 23 —è–Ω–≤–∞—Ä—è"])

    # –ö–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è URL
    encoded_intro = quote(intro)
    encoded_proposal = quote(proposal)

    # –ü–æ–ª—É—á–∞–µ–º chat_id —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    chat_id = update.effective_chat.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:5000)
    invite_url = (f"http://127.0.0.1:5000/invite/unique_invite_id?"
                  f"design={design}&intro={encoded_intro}&proposal={encoded_proposal}"
                  f"&chat_id={chat_id}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR‚Äë–∫–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    img = qrcode.make(invite_url)
    img_path = "invite_qr.png"
    img.save(img_path)

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –ú–∏–Ω–∏‚Äë—Å–∞–π—Ç –≥–æ—Ç–æ–≤. –û—Ç–∫—Ä–æ–π —ç—Ç–æ—Ç URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n{invite_url}"
    )
    return ConversationHandler.END

def main():
    application = ApplicationBuilder().token("–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DESIGN: [CallbackQueryHandler(design_choice)],
            INTRO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_intro)],
            PROPOSAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_proposal)],
            TIMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_times)]
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
